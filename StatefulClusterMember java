import org.jgroups.*;
import org.jgroups.protocols.*;
import org.jgroups.util.Util;

import java.net.URL;
import java.io.*;
import java.util.*;

public abstract class StatefulClusterMember implements Receiver {
    
    final List<Message> state=new LinkedList<>();

    private JChannel channel;
    private String configurationUrl;
    private String clusterName;
    private static final int timeout = 10000;

    public int getTimeout() {
	return this.timeout;
    }
    
    public JChannel getChannel() {
	return this.channel;
    }

    public String getConfigurationUrl() {
	return this.configurationUrl;
    }

    public String getClusterName() {
	return this.clusterName;
    }
    
    public StatefulClusterMember(String configurationUrl, String clusterName) {
	this.configurationUrl = configurationUrl;
	this.clusterName = clusterName;
    }
    
    public void viewAccepted(View new_view) {
        System.out.println("** view: " + new_view);
    }

    public void getState(OutputStream output) throws Exception {
        synchronized(state) {
            Util.objectToStream(state, new DataOutputStream(output));
        }
    }

    public void setState(InputStream input) throws Exception {
        List<Message> list=Util.objectFromStream(new DataInputStream(input));
        synchronized(this.state) {
            this.state.clear();
            this.state.addAll(list);
        }
        System.err.println(list.size() + " messages in session state");
        list.forEach(System.out::println);
    }

    public void incrementState(Message msg) {
	// FIXME: if we enforce a single threaded JVM per cluster member
	//        then no need to synchronize
	synchronized(this.state) {
	    this.state.add(msg);
	}
    }

    public abstract void receive(Message msg);
    public abstract void eventLoop();

    public void start() throws Exception {
	System.err.println("Starting");
        this.channel=new JChannel(this.getConfigurationUrl()).setReceiver(this);
        this.channel.connect(this.getClusterName());
        this.channel.getState(null, this.getTimeout());
        this.eventLoop();
        this.channel.close();
    }

}
